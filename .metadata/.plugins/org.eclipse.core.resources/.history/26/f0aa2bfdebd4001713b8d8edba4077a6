package controllers;

import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;

import com.fasterxml.jackson.databind.JsonNode;

import models.Task;
import play.libs.Json;
import play.mvc.*;

/**
 * This controller contains an action to handle HTTP requests
 * to the application's home page.
 */
public class HomeController extends Controller {
    
    public Result addTask() {
    	JsonNode jsonNode = request().body().asJson();
    	Task task = Json.fromJson(jsonNode, Task.class);
    	task.save();
        return ok();
    }
    
    public Result getTasks() {
    	List<Task> tasks = Task.find.all();
        return ok(Json.toJson(tasks));
    }
    
    public Result getTaskById(Integer id) {
    	Task task = Task.find.byId(String.valueOf(id));
        return ok(Json.toJson(task));
    }
    
    public Result updateTask(Integer id) {
    	JsonNode jsonNode = request().body().asJson();
    	Task task = Json.fromJson(jsonNode, Task.class);
    	
    	Task oldTask = Task.find.byId(String.valueOf(id));
    	oldTask.title = task.title;
    	oldTask.content = task.content;
    	oldTask.save();
        return ok();
    }
    
    public Result deleteTask(Integer id) {
    	Task.find.deleteById(String.valueOf(id));
        return ok();
    }
    
    public CompletionStage<Result> asyncTask(){
    	CompletionStage<String> promiseOfPIValue = computePIAsynchronously();
    	CompletionStage<String> promiseOfPIValue2 = computePIAsynchronously2();
    	// Runs in same thread
    	CompletionStage<Result> promiseOfResult = promiseOfPIValue.thenApply(pi ->
    	                ok("PI value computed: " + pi)
    	);
    	
    	System.out.println("Action id: " + Thread.currentThread().getId());
    	return promiseOfResult;
    }

	private CompletionStage<String> computePIAsynchronously() {
		System.out.println("Method id: " + Thread.currentThread().getId());
		return CompletableFuture.completedFuture("1");
	}
	
	private CompletionStage<String> computePIAsynchronously2() {
		System.out.println("Method2 id: " + Thread.currentThread().getId());
		return CompletableFuture.completedFuture("2");
	}

}
